#!/usr/bin/env -S ESM_OPTIONS='{mode:"all",cache:0}' node -r esm
import neo4j from "neo4j-driver";
import { readFileSync } from "fs";
import path from "path";

const [
  ,
  ,
  $1 = "neo4j://localhost:7687",
  $2 = "neo4j",
  $3 = "1234",
] = process.argv;

const driver = neo4j.driver($1, neo4j.auth.basic($2, $3));
const serverInfo = await driver.verifyConnectivity();
console.log(serverInfo);

const session = driver.session();

function getSeedingQueries() {
  const cypherSeedFilePath = path.join(".", "sampleData.cypher");
  return readFileSync(cypherSeedFilePath).toString();
}

async function resetDb() {
  // Delete all Nodes that have relationships and their relationships
  await session.run(`MATCH (a) -[r] -> () DELETE a, r`);
  // Delete all Nodes that don't have relationships
  await session.run(`MATCH (a) DELETE a`);
}

async function runTransaction(query) {
  // const result = await session.readTransaction((tx) => tx.run(query));
  const result = await session.run(
    `CREATE (a:Artist {name: 'Jimi Hendrix'}) RETURN a`
  );
  result.records.forEach(console.log);
}

try {
  await resetDb();
  const cypherQueries = getSeedingQueries();
  // await runTransaction(cypherQueries);
} catch (err) {
  console.error(err);
} finally {
  await session.close();
}
// on application exit:
await driver.close();
